# BGScript demo apps: GPIO interrupt
# implemented on Whistl V3.2
# testing by Ardya Dipta
# button A is at P0_1 and P1_2
# button B is at P0_2 and P1_0


dim connected 		# BLE conection status
dim advertising 	# advertising status
dim ipr_result		#container for io_port_read(), call's returned "result" value (uint16)
dim ipr_port		# container for io_port_read() call's returned "port" value (uint8)
dim ipr_data		# container for io_port_read() call's returned "port" value (uint8)

dim alert_state(1)			# Stores alert_state, controlling yellow/red mode


dim last_press
dim emergency_status
dim flash_status
dim led_status

# Hardware configuration constant
const HW_PORT_led = 0 				#port 0
const HW_PIN_led = $40				#pin 6 $40
const HW_PORT_0_PINS = $86 		 	#PORT 0 pin 1, 2,7 0b10000110
const HW_PORT_1_PINS = 5		 	#PORT 1 pin 0 and 2 0b00000101
const HW_PORT_wake = 1				#port 1
const HW_PIN_wake = $80				#pin 7
const EMERGENCY_SWITCH_ON 	= 2 	# connect to P0_1
const EMERGENCY_SWITCH_OFF 	= 4 	# connect to P1_2
const FLASH_SWITCH_ON		= 4 	# connect to P0_2
const FLASH_SWITCH_OFF		= 1 	# connect to P1_0
const FALLING_EDGE 			= 1 	# falling edge configuration
const RISING_EDGE			= 0 	# rising edge for configuration

#timing constant for timer
const TEN_MS 	= 328				# 10  ms
const FIFTY_MS 	= 1640				# 50  ms
const HUNDRED_MS = 3277				# 100 ms
const ONE_S 	= $8000				# 1 second

#handles constants
const TH_alarm = 2
const TH_red_on = 3
const TH_red_off = 4
const TH_wake = 5
const TH_disconnect = 6
const TH_timeout = 7
const TH_alert_states = 8

#other constants
const ps_bond_storage = $66


event system_boot(major, minor, patch, build, ll_version, protocol, hw)
	# initialize connection status as disconnected
	connected = 0

	#initialize advertising status as ON (since we're about to turn it on)
	advertising = 1

	alert_state(0:1) = $01
	disconnect_from_write_state = 0
	retry_encrypt_count = 0

	# initialize emergency status with 0
	emergency_status = 0
	flash_status = 0
	led_status = 0

	# Set advertisement interval to 125ms.
	# Use all three advertisement channels
	call gap_set_adv_parameters(200, 200, 7)

	# enable bondable mode
    call sm_set_bondable_mode(1)	

	#put module into discoverable / connectable mode 
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

	#enable interrupt on P0_1 and P0_2 falling edge
	# parameters are port =0, bitmask = 0b00000110, edge = falling
	call hardware_io_port_config_irq(0,HW_PORT_0_PINS,FALLING_EDGE)

	#enable interrupt on P1_0 and P1_2 rising edge
	# parameters are port =1, botmask= 0b00000101, edge = rising
	call hardware_io_port_config_irq(1,HW_PORT_1_PINS,RISING_EDGE)

	# This is for the LED pin P0_6
	call hardware_io_port_config_direction(HW_PORT_led, HW_PIN_led)
	#turn off the LED first
	call hardware_io_port_write(HW_PORT_led, HW_PIN_led, 0)

	#DEVKIT UART OUTPUT : welcome message
	call system_endpoint_tx(system_endpoint_uart1, 28, "\r\n=============\r\n")
	call system_endpoint_tx(system_endpoint_uart1, 26, "Bluegiga GPIO demo ready \r\n")


	# initiate timer for LED. using P0_6
	# at timer 1, P0_6 is channel 4, alternate 2
	# turn off the LED
	call hardware_timer_comparator(1, 4, 6, 0)

	# turn off the alarm timer
	#call hardware_set_soft_timer(0,TH_alarm,1)
end 

event connection_disconnected(handle, result)
	#set connection status to DISCONNECTED
	connected = 0

	#DEVKIT UART OUTPUT: disconnected
	call system_endpoint_tx(system_endpoint_uart1, 14, "DISCONNECTED \r\n")

	#set advertisement interval back to 200-300ms, use all advertisement channels
	#note mn/max parameters are in units of 625 uSec
	call gap_set_adv_parameters(320, 480, 7)

	#put module back into discoverable/connectable mode
	#also resumes advertising based on parameters
	call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end

#catch button press for P0_1, P0_2, P1_6 (active high configuration, hardare.xml pulls it low)
event hardware_io_port_status(delta, port, irq, state)
=
	# uncomment these 2 lines for debouncing
	if (delta-last_press) >= TEN_MS|| (delta < last_press && ($7FFFFFFF - last_press + delta) > TEN_MS) then
        last_press = delta

		if port = 0 then
			if(irq & EMERGENCY_SWITCH_ON) = EMERGENCY_SWITCH_ON then 
				#P0_1 is LOW and the source of this interrupt
				#call system_endpoint_tx(system_endpoint_uart1, 14, "P0_1 pressed, LED turned on \r\n")
				#turn on the LED
				#call hardware_io_port_write(HW_PORT_led, HW_PIN_led, HW_PIN_led)
				emergency_status = 1

				#turn on led every 500ms
				call hardware_set_soft_timer($2000, TH_alarm,0)

				#turn advertising mode ON
				call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
			end if

			if(irq & FLASH_SWITCH_ON) = FLASH_SWITCH_ON then 
				#P0_2 is LOW and the source of this interrupt
				#DEVKIT UART OUTPUT : P0_2 pressed
				#call system_endpoint_tx(system_endpoint_uart1, 14, "P0_2 pressed \r\n")

				flash_status = 1
				# if emergency button is not swithced, then flash turns on forever
				if emergency_status = 0 then
				 	call hardware_timer_comparator(1, 4, 6, 8300)
				 end if
			end if


			#state of port 2 read later, since we have to do it in either interrupt case


		end if

		if port = 1  then

			if (irq & FLASH_SWITCH_OFF) = FLASH_SWITCH_OFF then 
				#P1_0 is LOW and the source of this interrupt
				#DEVKIT UART OUTPUT : P1_0 pressed, LED off
				#call system_endpoint_tx(system_endpoint_uart1, 14, "P1_3 pressed \r\n")
				flash_status = 0
				if emergency_status = 0 then
					call hardware_timer_comparator(1, 4, 6, 0)
				end if
			end if


			if (irq & EMERGENCY_SWITCH_OFF) = EMERGENCY_SWITCH_OFF then 
				
				#call system_endpoint_tx(system_endpoint_uart1, 14, "P1_2 pressed, LED turned off \r\n")
				emergency_status = 0
				call hardware_set_soft_timer(0, TH_alarm,0)
				# turn off the LED
				call hardware_timer_comparator(1, 4, 6, 0)
				
				#turn advertising mode off
				call gap_set_mode(gap_non_discoverable, gap_non_connectable)

				# if flash is switched on, turn LED on
				if flash_status = 1 then
					call hardware_timer_comparator(1, 4, 6, 8300)
				end if
			end if



			#state of port 2 read later, since we have to do it in either interrupt case

		end if


	
	# uncomment this for debouncing
	end if


end

event hardware_soft_timer(handle)
	
	if handle=TH_alarm then
		#This loop goes as long as needed switching between high and low frequency PWM	
		if led_status = 0 then
			# channel 0 establishes the baseline frequency (32,000,000 Hz / 10000 = 3.2 kHz)
			call hardware_timer_comparator(1, 0, 6, 8350)
			# channel 4 is LED (P0_6) is 50% duty cycle (5000 / 10000 = 0.5)
			call hardware_timer_comparator(1, 4, 6, 8300)
			led_status = 1
		else if led_status = 1 then
				# channel 0 establishes the baseline frequency (32,000,000 Hz / 9000 = 3.55 kHz)
				call hardware_timer_comparator(1, 0, 6, 8100)
				led_status = 0
				# channel 4 is LED (P0_6) is 50% duty cycle (5000 / 10000 = 0.5)
				call hardware_timer_comparator(1, 4, 6, 0)
			end if
		end if
	end if 
end















