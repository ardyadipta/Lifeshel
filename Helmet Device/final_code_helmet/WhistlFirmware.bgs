# ================================================================
# Whistl Firmware Version 2
# ----------------------------------------------------------------
# Originally created by Siri Amrit Ramos
# CHANGELOG:
#   2015-02-18 
#	by Ardya Dipta (ardyadipta@gmail.com)
#	Changing functionality for safety helmet device.
#	changing the push button to switch button,
# 	Hence, needed two input for each switch. One pin for FALLING edge, and the other is for RISING edge
# 		toggle switch A (Emergency Switch) is at P0_1 and P1_2
# 		toggle switch B (Flash light switch)is at P0_2 and P1_0
#	
#	Whenever the Emergency switch is ON, the flash will blink ON and OFF and send bluetooth signal to smartphone
#		- in the future, this will be sent to another BLE duino that connects to satelite
#	 
#
# ================================================================

##################################################################################################
#
#
#
#     Declare Variables
#
#
#
##################################################################################################

#Variables
dim bat_pct     			# container for battery measurement percentage
dim alert_state(1)			# Stores alert_state, controlling yellow/red mode
dim led_status				# Flag to alter between ON/OFF state of LED
dim sleep_timer
dim disconnect_from_write_state
dim disconnect_state
dim retry_encrypt_count

dim last_press 				# variable to store the time stamp of the last press event happens, for debouncing
dim emergency_status		# store the status of emergency switch
dim flash_status			# store the status of flash switch

#Connection Variables
dim bond_count
dim ps_bond_count
dim temp_result
dim ps_bond_length
dim bond_handle
dim sleep_time_counter
dim encrypted_flag

# connection_info structure:
# - 0: connected/encrypted/bonded flag (bits 0, 1, 2)
# - 1: disconnection action flags (bit 0 = add to whitelist, bit 1 = resume unfiltered advertising)
# - 2-7: current or last connected MAC address
# - 8: current or last connected address type
dim connection_info(9)
# temporary buffer used for storing and echoing hex data as ASCII (Returns the right error codes for connecting)
dim temp_buf(4)

# Hardware configuration constant
# INPUT:
# button A 	P0_1 and P1_2
# button B 	P0_2 and P1_0
const HW_PORT_0_PINS = $06 		 	#PORT 0 pin 1, 2        0b00000110 for interrupt
const HW_PORT_1_PINS = $05		 	#PORT 1 pin 0, 2 		0b00000101 for interrupt
const EMERGENCY_SWITCH_ON 	= 2 	# connect to P0_1
const EMERGENCY_SWITCH_OFF 	= 4 	# connect to P1_2
const FLASH_SWITCH_ON		= 4 	# connect to P0_2
const FLASH_SWITCH_OFF		= 1 	# connect to P1_0

# OUTPUT
# LED 		P0_6
# Wake up 	P1_7 	
const HW_PORT_led = 0 				#port 0
const HW_PIN_led = $40				#pin 6 $40
const HW_PORT_wake = 1				#port 1
const HW_PIN_wake = $80				#pin 7

const FALLING_EDGE 			= 1 	# falling edge configuration
const RISING_EDGE			= 0 	# rising edge for configuration
######

#timing constant for timer
const TEN_MS 	= 328				# 10  ms
const FIFTY_MS 	= 1640				# 50  ms
const HUNDRED_MS = 3277				# 100 ms
const ONE_S 	= $8000				# 1 second
const ONE_MIN = $1E0000				# 1 minute

#Other Constants
const ps_bond_storage = $66
const setting_time = 60			#in seconds, time given to change BLE settings
const yellow_time = 30 			#in seconds, time given to initialize yellow
const sleep_time = 5			#in minutes, time given to sleep until wake up
const sleep_time_multiplyer = 60
const check_in_time = 30 		#in seconds, time given for wake up after yellow mode initialized
const red_time = 15				#in seconds, time given to red alarm

#Timer Variables
const TH_red_on = 1					#Timer handle for turning red on
const TH_red_off = 2				#Timer handle for turning red off
const TH_alarm = 3					#Timer handle that controls Buzzer and LED
const TH_wake = 4					#Timer handle that wakes device from sleep
const TH_timeout = 7				#Timer handle that increases alert states if timeout occurs
const TH_alert_states = 8			#Timer handle that triggers alert state actions
const TH_red_delay = 9				#Timer handle that delays all red mode actions
const TH_encrypt = 11				#Timer handle that initiates encryption and bonding
const TH_disconnect_state_reset = 15
const TH_disconnect = 17			#Timer handle that disconnects
const TH_reset_alert_state = 18		#Timer handle that delays resetting alert state to prevent bugs
const TH_reset_encrypt_count = 19


##################################################################################################
#
#
#
#     Start up Logic
#
#
#
##################################################################################################

event system_boot(major, minor, patch, build, ll_version, protocol, hw)
	#call system_endpoint_tx(system_endpoint_uart1, 31, "Welcome to Whistl Firmware V1\r\n")
	#Initiate required variables
	emergency_status = 0
	flash_status = 0
	led_status = 0

	alert_state(0:1) = $01
	disconnect_from_write_state = 0
	retry_encrypt_count = 0
	call flash_ps_load($8000 + ps_bond_storage)(temp_result, ps_bond_length, ps_bond_count)
	
	#Do initial write to alert state
	call attributes_write(c_alert_status, 0, 1, alert_state(0:1))	

	# Set the INPUT Switches
	# enable interrupt on P0_1 and P0_2 falling edge
	# parameters are port =0, bitmask = 0b00000110, edge = falling
	call hardware_io_port_config_irq(0,HW_PORT_0_PINS,FALLING_EDGE)

	# enable interrupt on P1_0 and P1_2 rising edge
	# parameters are port =1, botmask= 0b00000101, edge = rising
	call hardware_io_port_config_irq(1,HW_PORT_1_PINS,RISING_EDGE)

	## Set the LED and Wake Up pin as OUTPUT
	# P1_7(The wake up pin)
	call hardware_io_port_config_direction(HW_PORT_wake, HW_PIN_wake)
	# This is for the LED pin P0_6
	call hardware_io_port_config_direction(HW_PORT_led, HW_PIN_led)
	#turn off the LED first
	call hardware_io_port_write(HW_PORT_led, HW_PIN_led, 0)
	#Turn P1_7 pin to low
	call hardware_io_port_write(HW_PORT_wake, HW_PIN_wake, 0)

	# Set advertisement interval to 125ms.
	# Use all three advertisement channels
	call gap_set_adv_parameters(200, 200, 7)
	
	#Turn off the timer for alarm
	call hardware_set_soft_timer(0,TH_alarm,1)

	# initiate timer for LED. using P0_6
	# at timer 1, P0_6 is channel 4, alternate 2
	# turn off the LED
	call hardware_timer_comparator(1, 4, 6, 0)

	# enable bondable mode
    call sm_set_bondable_mode(1)	
end

##################################################################################################
#
#
#
#     Input Logic
#
#
#
##################################################################################################

#Button down event listener
 event hardware_io_port_status(delta, port, irq, state)

	# uncomment these 2 lines for debouncing
	if (delta-last_press) >= TEN_MS|| (delta < last_press && ($7FFFFFFF - last_press + delta) > TEN_MS) then
        last_press = delta
    ###### debouncing done

		if port = 0 then
			if(irq & EMERGENCY_SWITCH_ON) = EMERGENCY_SWITCH_ON then 
				#emergency status is ON, this will be used while flashing
				emergency_status = 1
				# All red mode actions
				# If not advertising, start, default advertisement interval (~350ms)
				call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
				# Change alert state to red
				alert_state(0:1) = $03
				call attributes_write(c_alert_status, 0, 1, alert_state(0:1))
				# Turn on all red mode actions
				call hardware_set_soft_timer($01,TH_alert_states,1)

			end if

			if(irq & FLASH_SWITCH_ON) = FLASH_SWITCH_ON then 
				#P0_2 is LOW and the source of this interrupt
				#DEVKIT UART OUTPUT : P0_2 pressed
				#call system_endpoint_tx(system_endpoint_uart1, 14, "P0_2 pressed \r\n")

				flash_status = 1
				# if emergency button is not swithced, then flash turns on forever
				if emergency_status = 0 then
					#call hardware_set_soft_timer(0,TH_alarm,0)
				 	call hardware_timer_comparator(1, 4, 6, 8300)
				 end if
			end if

		end if

		if port = 1  then

			if (irq & FLASH_SWITCH_OFF) = FLASH_SWITCH_OFF then 
				#P1_0 is LOW and the source of this interrupt
				#DEVKIT UART OUTPUT : P1_0 pressed, LED off
				#call system_endpoint_tx(system_endpoint_uart1, 14, "P1_3 pressed \r\n")
				flash_status = 0

				# if the emergency switch is OFF, turn off the LED
				if emergency_status = 0 then
					# if
					call hardware_timer_comparator(1, 4, 6, 0)
				end if
			end if


			if (irq & EMERGENCY_SWITCH_OFF) = EMERGENCY_SWITCH_OFF then 
				
				#call system_endpoint_tx(system_endpoint_uart1, 14, "P1_2 pressed, LED turned off \r\n")
				emergency_status = 0
				call hardware_set_soft_timer(0, TH_alarm,0)

				# if flash is switched on, turn LED on

				
				# originally taken from triple click state
				#Reset all timers and alert states
				call hardware_set_soft_timer(0,TH_wake,1)
				call hardware_set_soft_timer(0,TH_timeout,1)
				disconnect_from_write_state = 1
				call hardware_set_soft_timer(ONE_S/10,TH_disconnect_state_reset, 1)
				call hardware_set_soft_timer($01,TH_red_off,1)
				alert_state(0:1) = $00
				call attributes_write(c_alert_status, 0, 1, alert_state(0:1))
				call hardware_set_soft_timer($01,TH_alert_states,1)
			end if

			#state of port 2 read later, since we have to do it in either interrupt case
		end if
	
	# uncomment this for debouncing
	end if

end

##################################################################################################
#
#
#
#     Timer Logic
#
#
#
##################################################################################################

event hardware_soft_timer(handle)
 	
	
	if handle = TH_alert_states then
		if alert_state(0:1) = $00 then
			#Write all "Settings + Shutoff" actions
			#Begin timeout timer: ONE_S is crystal speed/sec * 60 sec * 1 min 
			call hardware_set_soft_timer(0,TH_timeout,1)
			call hardware_set_soft_timer(ONE_S*setting_time,TH_timeout,1)
			#call system_endpoint_tx(system_endpoint_uart1, 15, "Alert State 0\r\n")
		end if
		
		if alert_state(0:1) =	 $01 then
			#Write all "Pre-yellow" actions
			#Begin timeout timer: ONE_S is crystal speed/sec so that means 1 second
			#call system_endpoint_tx(system_endpoint_uart1, 15, "Alert State 1\r\n")
			call hardware_set_soft_timer(0,TH_timeout,1)
			call hardware_set_soft_timer(ONE_S*yellow_time,TH_timeout,1)
		end if
		
		if alert_state(0:1) = $02 then
			# Write all "Sleep" actions
			#call system_endpoint_tx(system_endpoint_uart1, 15, "Alert State 2\r\n")
			
			sleep_time_counter = 0
			call hardware_set_soft_timer(0,TH_wake,1)
			# At the end of timer, wake dis bish up. In future, change time to sleep_timer
			call hardware_set_soft_timer(ONE_S*sleep_time_multiplyer,TH_wake,0)
		end if
		
		if alert_state(0:1) = $03 then
			#Write all 'red' mode actions
			#Start red state
			call hardware_set_soft_timer($01, TH_red_on,1)
			#call system_endpoint_tx(system_endpoint_uart1, 15, "Alert State 3\r\n")
			#Do we want this??? --- NO
			#When timer expires, shuts off buzzer & LED
			#call hardware_set_soft_timer(ONE_S*red_time,TH_red_off,1)
		end if
		
		if alert_state(0:1) = $04 then
			call hardware_set_soft_timer(0,TH_timeout,1)
		end if
	end if
	
	if handle = TH_red_on then
		#Turn off continuous 
		call hardware_set_soft_timer($00,TH_wake,0)
		#Turn sleep state off so that PWM doesn't get messed up
		call hardware_io_port_write(HW_PORT_wake, HW_PIN_wake, 255)
		#Turn PWM for buzzer
		call hardware_set_soft_timer($1000,TH_alarm,0)
	end if
  
	if handle=TH_red_off then
		#Turn sleep state back on by lowering wake up pin
		call hardware_io_port_write(HW_PORT_wake, HW_PIN_wake, 0)
		#Turn off buzzer, LED pwm
		call hardware_set_soft_timer(0,TH_alarm,1)
		call hardware_timer_comparator(1, 4, 6, 0)
		if flash_status = 1 then
			call hardware_timer_comparator(1, 4, 6, 8300)
		end if
		
		if disconnect_from_write_state != 1 then
			#Put module to sleep
			call hardware_set_soft_timer($01, TH_disconnect,1)
			call hardware_set_soft_timer(0,TH_alert_states,1)
		end if
		
		#Turn off all timers
		call hardware_set_soft_timer(0,TH_wake,1)
		call hardware_set_soft_timer(0,TH_timeout,1)
	end if
  
	if handle=TH_alarm then
		#This loop goes as long as needed switching between high and low frequency PWM	
		if led_status = 0 then
			# channel 4 is LED (P0_6) is 50% duty cycle (5000 / 10000 = 0.5)
			call hardware_timer_comparator(1, 4, 6, 8300)
			led_status = 1
		else if led_status = 1 then
				led_status = 0
				# channel 4 is LED (P0_6) is 50% duty cycle (5000 / 10000 = 0.5)
				call hardware_timer_comparator(1, 4, 6, 0)
			end if
		end if
	end if 
  
	if handle = TH_wake
		sleep_time_counter = sleep_time_counter + 1
		if  sleep_time_counter = sleep_time then
			#Turn off continuous timer
			call hardware_set_soft_timer($00,TH_wake,0)
			call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
			#call system_endpoint_tx(system_endpoint_uart1, 21, "Started advertising\r\n")
			
			if alert_state(0:1) = $02 then
				#Begin timeout timer: ONE_S is crystal speed/sec * 60 sec * 1 min 
				call hardware_set_soft_timer(ONE_S*check_in_time,TH_timeout,1)
			end if
		end if
	end if
  
	if handle = TH_timeout
		#These actions happen at THE END of the timeout period
		if alert_state(0:1) = $02 then
			alert_state(0:1) = $03
			call attributes_write(c_alert_status, 0, 1, alert_state(0:1))
			call hardware_set_soft_timer($00,TH_wake,0)
			call hardware_set_soft_timer($01, TH_alert_states, 1)
		end if
		
		if alert_state(0:1) = $01 then
			call connection_disconnect(0)
			call gap_set_mode(gap_non_discoverable, gap_non_connectable)
			disconnect_state = 1
			#call system_endpoint_tx(system_endpoint_uart1, 21, "Stopped advertising\r\n")
			alert_state(0:1) = $02
			call attributes_write(c_alert_status, 0, 1, alert_state(0:1))
			call hardware_set_soft_timer($01, TH_alert_states, 1)
		end if
		
		if alert_state(0:1) = $00 then
			# Put module to sleep
			call hardware_set_soft_timer($01, TH_disconnect,1)
			call hardware_set_soft_timer($02, TH_reset_alert_state, 1)
		end if
	end if
	
	if handle = TH_reset_alert_state then
		alert_state(0:1) = $01
		call attributes_write(c_alert_status, 0, 1, alert_state(0:1))
	end if
	
	if handle = TH_encrypt then
        #call system_endpoint_tx(system_endpoint_uart1, 29, "2. Requesting encryption...\r\n")
        # other side hasn't tried an encrypted link yet even though we are
        # bonded as far as we know anyway, so try to start it from this end
        # ("connection" value here is always 0 since we are a peripheral,
        # and peripherals only support a single connection at a time)
        call sm_encrypt_start(0, 1)
    end if

	if handle = TH_disconnect_state_reset then
		disconnect_from_write_state = 0
	end if
	
	if handle = TH_disconnect then
		call connection_disconnect(0)
		call gap_set_mode(gap_non_discoverable, gap_non_connectable)
		disconnect_state = 1
		#call system_endpoint_tx(system_endpoint_uart1, 21, "Stopped advertising\r\n")
	end if
	
	if handle = TH_reset_encrypt_count then
		retry_encrypt_count = 0
	end if
end

##################################################################################################
#
#
#
#     Bonding and Connection code
#
#
#
##################################################################################################

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	
	#call system_endpoint_tx(system_endpoint_uart1, 10, "In event\r\n")
	# Load bond count from persistent storage
	call flash_ps_load($8000 + ps_bond_storage)(temp_result, ps_bond_length, ps_bond_count)
	
	if ps_bond_count = 0 then
		# First time a device has bonded. Set this device to be the only bond handle worthy
		bond_handle = bonding
	else
		if bond_handle != bonding then
			# When a new device connects, it will come here because it doesn't have the same bond handle as bond_handle
			#call system_endpoint_tx(system_endpoint_uart1, 36, "More than one bond, disconnecting...")
			#call system_endpoint_tx(system_endpoint_uart1, 2, "\r\n")
			# Put module to sleep
			#call hardware_set_soft_timer($01, TH_disconnect,1)
		end if
	end if

	#Only enter this if it is a valid connection (if bond_handles match)
	if bond_handle = bonding then
		if (flags & $05) = $05 then
			# connection established
			#call system_endpoint_tx(system_endpoint_uart1, 10, "Connected ")
			
			# display current bond status
			# if bonding < $ff then
				# call system_endpoint_tx(system_endpoint_uart1, 18, "(already bonded)\r\n")
			# else
				# call system_endpoint_tx(system_endpoint_uart1, 14, "(not bonded)\r\n")
			# end if
			
			# update connection info (connected = true)
			connection_info(0:1) = connection_info(0:1) | 1

			# clear "disconnection actions" flag so we don't re-use old settings
			connection_info(1:1) = 0

			# copy address information into placeholders
			memcpy(connection_info(2), address(0), 6)
			connection_info(8:1) = address_type
		end if
		
		if (flags & $02) = $02 then
			
			# encryption started
			#call system_endpoint_tx(system_endpoint_uart1, 11, "Encrypted\r\n")

			# update connection info (encrypted = true)
			connection_info(0:1) = connection_info(0:1) | 2
			disconnect_state = 0
			# cancel the pending one-shot encryption timer, if running
			call hardware_set_soft_timer(0, 1, 1)
		else
			# request encryption if not encrypted already
			if bonding = $ff then
				# not bonded or encrypted, so request both
				#call system_endpoint_tx(system_endpoint_uart1, 29, "1. Requesting encryption...\r\n")
				call sm_encrypt_start(0, 1)
			else
				# update connection info (bonded = true)
				#connection_info(0:1) = connection_info(0:1) | 4
				
				# start one-shot encryption attempt timer in case the remote side
				# doesn't attempt an encrypted link within 1 second (this might
				# happen if you bond with a smartphone and then remove the pairing
				# info from the phone side, but not the local module side)
				#call hardware_set_soft_timer(ONE_S, TH_encrypt, 1)
			end if
		end if
	end if
end

event sm_bond_status(bond, keysize, mitm, keys)
    if (connection_info(0:1) & $01) != 0 then
        # already connected, so that means we just bonded
		#call system_endpoint_tx(system_endpoint_uart1, 9, "Bonded!\r\n")
        # update connection status (bonded = true)
        connection_info(0:1) = connection_info(0:1) | 4

        # increment local and persistent bond count
        bond_count = bond_count + 1
		ps_bond_count = ps_bond_count + 1 
		
		#save bond count to persistent storage
		call flash_ps_save($8000 + ps_bond_storage, 1, ps_bond_count)
		
        #call system_endpoint_tx(system_endpoint_uart1, 23, "2. Current bond count: ")
        #call system_endpoint_tx(system_endpoint_uart1, 1, bond_count + $30) # convert to ASCII (always 0-8)
		#call system_endpoint_tx(system_endpoint_uart1, 15, " ps_bond_count ")
		#call system_endpoint_tx(system_endpoint_uart1, 3, ps_bond_count + $30)
		#call system_endpoint_tx(system_endpoint_uart1, 2, "\r\n")
    end if
end

event sm_bonding_fail(handle, result)
    # if bonding fails, handle it gracefully based on the following possible results:
    # - 0x018B - Out of bonds (no space left, all 8 bonding slots taken)
    # - 0x0205 - Authentication failure (shouldn't happen with "just works" mode, but might otherwise)
    # - 0x0206 - Pin or key missing (probably local or remote device is missing the key, but not both)
    # - 0x0301 - Passkey entry failed (also shouldn't happen in "just works" mode unless bonding is cancelled)
    # - 0x0302 - OOB data not available (only occurs if OOB is required and not supported on both ends)
    # - 0x0303 - Authentication requirements (I/O capabilities required but not supported)
    # - 0x0304 - Confirm value failed (PIN entry/comparison attempted but failed)
    # - 0x0305 - Pairing not supported (also occurs if bond info removed from remote device but not local module)
    # - 0x0306 - Encryption key size (key size insufficient to meet security requirements)
    # - 0x0307 - Command not supported (SMP command is not supported on this device)
    # - 0x0308 - Unspecified reason (may occur if bond info is present remotely but not locally)
    # - 0x0309 - Repeated attempts (too little time has elapsed since last pairing/security request)
    # - 0x030A - Invalid parameters (bad parameters sent during pairing/bonding process)
   # call system_endpoint_tx(system_endpoint_uart1, 16, "Bonding failed: ")
    temp_buf(0:1) = ((result >> 12) & $f) + 48 + ((result >> 12) & $f)/10*7
    temp_buf(1:1) = ((result >> 8) & $f) + 48 + ((result >> 8) & $f)/10*7
    temp_buf(2:1) = ((result >> 4) & $f) + 48 + ((result >> 4) & $f)/10*7
    temp_buf(3:1) = (result & $f) + 48 + (result & $f)/10*7
    #call system_endpoint_tx(system_endpoint_uart1, 4, temp_buf(0:4))
    #call system_endpoint_tx(system_endpoint_uart1, 2, "\r\n")
    
    # NOTE: the most common cases you need to take care of are:
    # - 0x018B, which means you ran out of space and must remove at least one bond in order to bond again
    # - 0x0206, which typically means the pairing info was removed on the remote device but not locally
    # - 0x0301, which typically means the user cancelled the pairing request or entered the wrong passkey
    # - 0x0305, which is like 0x0206 but is often generated instead if the remote device is a smartphone
    # - 0x0308, which typically means the pairing info was removed on the local device but not remotely
    if result = $018b then
        # only solved by removing bonds
        #call system_endpoint_tx(system_endpoint_uart1, 33, "Out of bonds, clear bonds first\r\n")
    end if
    if result = $0301 then
        # usually solved simply by trying again
        #call system_endpoint_tx(system_endpoint_uart1, 33, "Passkey/confirm issue, retry...\r\n")
		if retry_encrypt_count <2 then
			call sm_encrypt_start(0, 1)
			retry_encrypt_count = retry_encrypt_count + 1
		else
			call hardware_set_soft_timer(ONE_S*120, TH_reset_encrypt_count,1)
			call hardware_set_soft_timer($01, TH_disconnect,1)
		end if	
    end if
    if result = $0305 || result = $0206 then
        # remove local bonding info first, then the remote device needs to reconnect
        #call system_endpoint_tx(system_endpoint_uart1, 39, "Local bond info issue, remove/disc...\r\n")
        bond_count = bond_count - 1
        call flash_ps_erase($8000 + handle)
        call sm_delete_bonding(handle)
        # Put module to sleep
		call hardware_set_soft_timer($01, TH_disconnect,1)
    end if
    if result = $0308 then
        # remove remote bonding info first, then the remote device needs to reconnect
        #call system_endpoint_tx(system_endpoint_uart1, 38, "Remote bond info issue, remove first\r\n")
        # Put module to sleep
		call hardware_set_soft_timer($01, TH_disconnect,1)
    end if
end


##################################################################################################
#
#
#
#     Attribute Writing and Reading Code
#
#
#
##################################################################################################

event attributes_value(connection, reason, handle, offset, value_len, value_data)
	#Check if writing buzzer State
	if handle = c_alert_status then
		call hardware_set_soft_timer(0,TH_wake,1)
		call hardware_set_soft_timer(0,TH_timeout,1)
		disconnect_from_write_state = 1
		call hardware_set_soft_timer(ONE_S/10,TH_disconnect_state_reset, 1)
		# write alert_state proxy variable
		alert_state(0:1) = value_data(0:1)
		if alert_state(0:1) != 3 then
			call hardware_set_soft_timer($01,TH_red_off,1)
		end if
		# Start correct action, given new alert state change
		call hardware_set_soft_timer($01, TH_alert_states, 1)
	end if
end

event attributes_user_read_request(connection, handle, offset, maxsize)
    
	if handle = c_alert_status then
		call attributes_user_read_response(connection, 0, 1, alert_state(0:1))
	end if

	if handle = c_sleep_timer then
		#call system_endpoint_tx(system_endpoint_uart1, 15, "Reading sleep\r\n")
		call attributes_user_read_response(connection, 0, 1, sleep_timer)
	end if
	
	# check for battery characteristic read request
    if handle = c_battery_measurement then
        # queue ADC reading (VDD/3 source, 12 effective bits, internal 1.24v reference)
        call hardware_adc_read(15, 3, 0)
    end if
end


event hardware_adc_result(input, value)
    # check for internal AVDD/3 result (battery channel)
    if input = 15 then
        # To scale the read value [0, +32767] to the range [0, 100] properly
        # we have to determine the 0% reading and the 100% reading based on
        # operating voltages.
        #
        # - A "full" battery will read ~4.7v:
        #   --> (4.7v/4.7v) * (32767/1.24v) = 26425
        # - An "empty" battery will read ~2.75v (min battery voltage):
        #   --> (2.75v/4.2) * (32767/1.24v) = 17302
        
        # This means we must scale [+17302, +26425] to [0, +100]
        
        bat_pct = (value - 17302) * 100 / (26425 - 17302)
        
        # NOTE: you can keep the battery at 100% for longer if you DECREASE
        # the high value (23342 above), and you can make it drop to 0% faster
        # if you INCREASE the low value (17616 above). You may need to test
        # to find a good range based on your own battery supply selection.
        
        # enforce 0%/100% bounds
        if bat_pct > 100 then
            bat_pct = 100
        end if
        if bat_pct < 0 then
            bat_pct = 0
        end if

        # respond with calculated percent (connection=0, result=0, length=1, data=bat_pct)
        call attributes_user_read_response(0, 0, 1, bat_pct)
    end if
end
